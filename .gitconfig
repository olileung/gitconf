[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[alias]
	# output a pretty log format
	logpretty = log --color --graph --pretty=format:\"%Cred%h%Creset - %<(50,trunc)%s %Cgreen(%cr) %C(bold blue)<%an>%Creset %C(yellow)%D%Creset\" --abbrev-commit

	# log pretty with depth arguement
	lg = "!f() { depth=${1-10}; git logpretty -n$depth; }; f"

	# get log by commit - defaults to HEAD
	lgc = "!f() { commit=${1-HEAD}; git log $commit -n1; }; f";

	rh = reset --hard
	co = checkout

	# install. Call when switching branches to update
	ins = "!f() {git pull && npm i && npm up}; f"

	# get the current branch name
	getb = rev-parse --abbrev-ref HEAD

	# push the current branch up to the remote
	pub = "!f() { branch=${1-$(git getb)}; git push origin $branch;}; f"

	# force push the current branch up - useful after amending commits etc
	pubf = "!f() { branch=${1-$(git getb)}; git push origin $branch -f;}; f"

	# diff the cached files
	difc = "!f() { context=${1-3}; git diff --cached -U$context;}; f"

	# diff files
	dif = "!f() { context=${1-3}; git diff -U$context;}; f"

	# commit with message, goes to edit view
	cmmt = "!f() { git commit -m \"$1\" -e ;}; f"

	# update the repo (down stream)
	update = "!f() { git get; git pr;}; f"

	# rebase to squash
	sq = "!f() { depth=${1-10}; git rebase -i HEAD~$depth; }; f"

	sqr = rebase -i --root 

	st = status
	stpk = "!f(){ index=${1-0}; git stash apply $index;}; f"
	pl = pull
	com = commit
	b = branch
	pk = cherry-pick
	cp = cherry-pick
	f = fetch
	get = fetch --all
	pr = fetch -p
	bl = branch --list
	sl = stash list
	ss = stash
	sa = stash apply
	sc = stash clear
	ca = commit --amend
	com = co
	com = checkout master
	cop = checkout -
	cln = clean -fxd -e .idea -e node_modules -e release -e app.log

	# rebase changes from a branch
	rbon = "!f() { target=${1-master}; git com && git pl && git cop && git rebase $target; }; f"
